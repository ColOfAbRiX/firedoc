- hosts: localhost

  vars:
    version:           "3.1.0"
    archive_url:       "https://github.com/Itseez/opencv/archive/{{ version }}.zip"
    install_gui:       yes
    install_media:     yes
    install_video:     yes
    install_python:    yes
    install_tesseract: yes

  tasks:

   - name: "Build tools"
     package: name="{{ item }}" state=present
     with_items: [ build-essential, cmake ]

   - name: "GUI"
     package: name="{{ item }}" state=present
     with_items: [ qt5-default, libvtk6-dev, libgtk2.0-dev ]
     when: install_gui | bool

   - name: "Media I/O"
     package: name="{{ item }}" state=present
     with_items: [ zlib1g-dev, libjpeg-dev, libwebp-dev, libpng-dev, libtiff5-dev, libjasper-dev, libopenexr-dev, libgdal-dev ]
     when: install_media | bool
   
   - name: "Video I/O"
     package: name="{{ item }}" state=present
     with_items: [ libdc1394-22-dev, libavcodec-dev, libavformat-dev, libswscale-dev, libtheora-dev, libvorbis-dev, libxvidcore-dev, libx264-dev, yasm, libopencore-amrnb-dev, libopencore-amrwb-dev, libv4l-dev, libxine2-dev ]
     when: install_video | bool
   
   - name: "Parallelism and linear algebra libraries"
     package: name="{{ item }}" state=present
     with_items: [ libtbb-dev, libeigen3-dev ]
   
   - name: "Python"
     package: name="{{ item }}" state=present
     with_items: [ python-dev, python-numpy, python-skimage, python-tk ]

   - name: "Find if OpenCV is Installed"
     find: paths="/usr/local/bin/opencv_annotation"
     register: opencv_installed

   - name: "OpenCV Archive"
     get_url:
       url:  "{{ archive_url }}"
       dest: "/tmp/opencv-{{ version }}-src"
     when: opencv_installed.matched > 0

   - name: "Extract Archive"
     unarchive:
       src:        "/tmp/opencv-{{ version }}-src"
       dest:       /tmp
       remote_src: yes
       list_files: yes
     when: opencv_installed.matched > 0
     register: opencv_archive

   - name: "Working Directory"
     set_fact:
       code_dir:  "/tmp/{{ opencv_archive.files | first }}"
       build_dir: "/tmp/{{ opencv_archive.files | first }}/build"
     when: opencv_installed.matched > 0

   - name: "Build Directory"
     file: path="{{ build_dir }}" state=directory
     when: opencv_installed.matched > 0

   - name: "Configure Make"
     shell: cmake -DWITH_QT=ON -DWITH_OPENGL=ON -DFORCE_VTK=ON -DWITH_TBB=ON -DWITH_GDAL=ON -DWITH_XINE=ON -DBUILD_EXAMPLES=ON {{ code_dir }}
     args:
       chdir:   "{{ build_dir }}"
       creates: "{{ build_dir }}/build.xml"
     when: opencv_installed.matched > 0

   - name: "Compile Sources"
     shell: make -j{{ [ansible_processor_vcpus - 1, 1] | max }}
     args:
       chdir: "{{ build_dir }}"
       creates: "{{ build_dir }}/bin/opencv_createsamples"
     when: opencv_installed.matched > 0

   - name: "Install the Build"
     become_user: root
     shell: make install
     args:
       chdir: "{{ build_dir }}"
       creates: /usr/local/share/OpenCV/
     when: opencv_installed.matched > 0

   - name: "Configure Dynamic Linker"
     shell: ldconfig
     args:
       chdir: "{{ build_dir }}"
     when: opencv_installed.matched > 0

   - name: "Cleanup"
     file: path="{{ code_dir }}" state=absent
     when: opencv_installed.matched > 0

   - name: "Install Tesseract"
     package: name="{{ item }}" state=present
     with_items: [tesseract-ocr, tesseract-ocr-eng]
     when: install_tesseract | bool

   - name: "Install PyTesser"
     pip: name=pytesseract
     when: install_tesseract | bool and 
           install_python | bool
